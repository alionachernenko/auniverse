{"version":3,"file":"static/js/322.b91b98eb.chunk.js","mappings":"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","sources":["components/Chat.jsx","components/ChatItem/ChatItem.jsx","pages/MessagesPage/MessagesPage.jsx"],"sourcesContent":["import { firestore } from 'config/firebase';\nimport { authContext } from 'context';\nimport { query } from 'firebase/database';\nimport {\n  collection,\n  doc,\n  getDocs,\n  onSnapshot,\n  updateDoc,\n  where,\n} from 'firebase/firestore';\nimport { useContext, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { addNewMessage, createNewChat } from 'utils';\nimport { Loader } from './Loader/Loader';\nimport { nanoid } from 'nanoid';\nimport { RiSendPlaneFill } from 'react-icons/ri';\nexport const Chat = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [messages, setMessages] = useState(null);\n  const [messageValue, setMessageValue] = useState('');\n  const [chatExists, setChatExists] = useState(false);\n  const { userId } = useContext(authContext);\n  const chatId = searchParams.get('id');\n  const recepientId = searchParams.get('with');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const checkChatExists = async () => {\n      const q = query(\n        collection(firestore, 'chats'),\n        where('members', 'array-contains', recepientId)\n      );\n      const querySnapshot = await getDocs(q);\n      setChatExists(!querySnapshot.empty);\n      if (!querySnapshot.empty)\n        setSearchParams({\n          id: querySnapshot.docs[0].id,\n          with: recepientId || 'none',\n        });\n      else setSearchParams({ id: 'new', with: recepientId || 'none' });\n    };\n\n    checkChatExists();\n    setIsLoading(false);\n  }, [recepientId, setSearchParams]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (chatId) {\n      const docRef = doc(firestore, 'chats', chatId);\n      onSnapshot(docRef, snapshot => {\n        setMessages(snapshot.data()?.messages);\n        setIsLoading(false);\n        if (snapshot.data().typing && snapshot.data().typing !== userId) {\n          setIsTyping(snapshot.data().typing);\n        } else setIsTyping(false);\n      });\n    }\n  }, [chatExists, chatId, userId]);\n\n  const onSendMessageFormSubmit = e => {\n    setIsLoading(true);\n    const message = {\n      senderId: userId,\n      text: messageValue,\n    };\n\n    e.preventDefault();\n    if (chatId === 'new') {\n      createNewChat(userId, recepientId, message).then(res =>\n        setSearchParams({ id: res.id, with: recepientId })\n      );\n    } else {\n      addNewMessage(chatId, message);\n    }\n    e.target.reset();\n    setIsLoading(false);\n  };\n\n  const onBlur = () => {\n    const chatRef = doc(firestore, 'chats', chatId);\n    updateDoc(chatRef, {\n      typing: null,\n    });\n  };\n\n  const onFocus = () => {\n    const chatRef = doc(firestore, 'chats', chatId);\n    updateDoc(chatRef, {\n      typing: userId,\n    });\n  };\n\n  return (\n    <Window>\n      {isLoading ? (\n        <Loader color=\"#00021a\" className=\"loader-chat\" />\n      ) : (\n        chatExists &&\n        messages && (\n          <Messages>\n            {messages.map(message => (\n              <div key={nanoid()}>\n                {message.senderId === userId && (\n                  <p\n                    style={{\n                      fontSize: 12,\n                      color: 'grey',\n                      marginBottom: 2,\n                      marginLeft: 20,\n                    }}\n                  >\n                    You\n                  </p>\n                )}\n                <Message\n                  className={message.senderId === userId ? 'send' : 'received'}\n                >\n                  {message.text}\n                </Message>\n              </div>\n            ))}\n          </Messages>\n        )\n      )}\n      {chatId !== 'new' && isTyping === recepientId && <p>Typing...</p>}\n      {(chatId !== 'new' || recepientId !== 'none') && (\n        <Form onSubmit={e => onSendMessageFormSubmit(e)}>\n          <textarea\n            onChange={e => {\n              setMessageValue(e.target.value);\n            }}\n            onFocus={onFocus}\n            onBlur={onBlur}\n          />\n          <button disabled={messageValue === ''} type=\"submit\">\n            <RiSendPlaneFill size=\"100%\" color=\"white\" />\n          </button>\n        </Form>\n      )}\n    </Window>\n  );\n};\n\nconst Window = styled.div`\n  height: calc(100vh - 61px);\n  width: 100%;\n  display: grid;\n  padding: 10px;\n  box-sizing: border-box;\n  position: relative;\n`;\nconst Message = styled.li`\n  width: 40%;\n  padding: 12px;\n  border-radius: 20px;\n  font-family: 'Nunito', sans-serif;\n  word-break: break-all;\n  &.received {\n    color: #00021a;\n    border: 1px solid orange;\n  }\n\n  &.send {\n    background-color: aliceblue;\n    color: #00021a;\n    border: 1px solid #00021a;\n  }\n`;\n\nconst Form = styled.form`\n  align-self: end;\n  height: auto;\n  width: auto;\n  display: flex;\n  justify-content: space-between;\n\n  & textarea {\n    max-width: 100%;\n    padding: 10px 20px;\n    font-size: 17px;\n    box-sizing: border-box;\n    flex: 1;\n    border: 1px solid #00021a;\n    font-family: 'Nunito', sans-serif;\n    min-height: 70px;\n    border-radius: 30px;\n    resize: none;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n\n  & button {\n    width: 50px;\n    height: 50px;\n    margin-left: 5px;\n    background-color: orange;\n    border: none;\n    border-radius: 100%;\n    padding: 10px;\n\n    &:disabled {\n      background-color: grey;\n    }\n  }\n`;\n\nconst Messages = styled.ul`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: 10px;\n  overflow-y: scroll;\n`;\n","import { useContext, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchUserInfo } from 'utils';\nimport avatarPlaceholder from '../../assets/images/avatar-placeholder.png';\nimport styled from 'styled-components';\nimport { authContext } from 'context';\nimport { doc, onSnapshot } from 'firebase/firestore';\nimport { firestore } from 'config/firebase';\n\nexport const ChatItem = ({ data }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [recepientUsername, setRecepientUsername] = useState();\n  const [recepientPhoto, setRecepientPhoto] = useState();\n  const [recepientId, setRecepientId] = useState();\n  const [isTyping, setIsTyping] = useState(false);\n  const { userId } = useContext(authContext);\n  const chatId = searchParams.get('id');\n\n  useEffect(() => {\n    fetchUserInfo(data.members.find(id => id !== userId))\n      .then(res => {\n        const { username, photoUrl, id } = res.val();\n\n        setRecepientUsername(username);\n        setRecepientPhoto(photoUrl ?? avatarPlaceholder);\n        setRecepientId(id);\n      })\n      .catch(error => console.log(error));\n  }, [data.members, data.recepientId, userId]);\n\n  useEffect(() => {\n    if (chatId) {\n      const docRef = doc(firestore, 'chats', chatId);\n      onSnapshot(docRef, snapshot => {\n        if (snapshot.data().typing && snapshot.data().typing !== userId) {\n          setIsTyping(snapshot.data().typing);\n        } else setIsTyping(false);\n      });\n    }\n  }, [chatId, userId]);\n\n  return (\n    <Item\n      onClick={() => setSearchParams({ id: data.id, with: recepientId })}\n      className={chatId === data.id && 'selected'}\n    >\n      <AvatarWrapper>\n        <img\n          src={recepientPhoto}\n          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n          alt='avatar'\n        />\n      </AvatarWrapper>\n      <Data>\n        <p style={{ fontWeight: 700 }}>{recepientUsername}</p>\n        <p\n          style={{\n            textOverflow: 'ellipsis',\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          {data.messages[data.messages.length - 1].text}\n        </p>\n        {isTyping === recepientId && <p>...</p>}\n      </Data>\n    </Item>\n  );\n};\n\nconst Item = styled.li`\n  background-color: white;\n  border-radius: 15px;\n  border: 1px solid white;\n  height: 70px;\n  display: flex;\n  padding: 10px;\n  align-items: center;\n  box-sizing: border-box;\n  gap: 10px;\n  font-family: 'Nunito', sans-serif;\n\n  &.selected {\n    background-color: #00021a;\n    color: white;\n  }\n`;\n\nconst AvatarWrapper = styled.div`\n  min-width: 50px;\n  width: 50px;\n  min-height: 50px;\n  height: 50px;\n  border-radius: 30px;\n  overflow: hidden;\n`;\n\nconst Data = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  white-space: nowrap;\n  overflow: hidden;\n`;\n","import { Chat } from 'components/Chat';\nimport { ChatItem } from 'components/ChatItem/ChatItem';\nimport { firestore } from 'config/firebase';\nimport { authContext } from 'context';\nimport { query } from 'firebase/database';\nimport { collection, onSnapshot, where } from 'firebase/firestore';\nimport { useContext, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst MessagesPage = () => {\n  const [chats, setChats] = useState([]);\n  const [searchParams] = useSearchParams();\n  const { userId } = useContext(authContext);\n  const chatId = searchParams.get('id');\n  const recepientId = searchParams.get('with');\n\n  useEffect(() => {\n    getChats(userId);\n  }, [userId]);\n\n  const getChats = userId => {\n    const q = query(\n      collection(firestore, 'chats'),\n      where('members', 'array-contains', userId)\n    );\n\n    onSnapshot(q, querySnapshot => {\n      const chats = [];\n      querySnapshot.forEach(doc => {\n        chats.push({ ...doc.data(), id: doc.id });\n      });\n      setChats(chats);\n    });\n  };\n\n  return (\n    <div\n      style={{\n        height: 'calc(100vh - 61px)',\n        marginTop: 61,\n        display: 'flex',\n        position: 'relative',\n      }}\n    >\n      <ChatsList>\n        {chats.map(chat => (\n          <ChatItem data={chat} />\n        ))}\n      </ChatsList>\n      {chatId === 'new' && (recepientId === 'none' ? (\n        <StartMessage>Select a chat</StartMessage>\n      ) : (\n        <StartMessage>Start a chat</StartMessage>\n      ))}\n      <Chat />\n    </div>\n  );\n};\n\nconst StartMessage = styled.p`\n  position: absolute;\n  top: 50%;\n  left: 60%;\n  transform: translate(-60%, -50%);\n  font-family: 'Nunito', sans-serif;\n  font-size: 50px;\n  color: #00021a;\n  font-weight: 700;\n`;\n\nconst ChatsList = styled.ul`\n  width: 25vw;\n  height: 100%;\n  overflowy: scroll;\n  background-color: #00021a;\n  padding: 10px;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport default MessagesPage;\n"],"names":["Chat","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","messages","setMessages","_useState3","_useState4","messageValue","setMessageValue","_useState5","_useState6","chatExists","setChatExists","userId","useContext","authContext","chatId","get","recepientId","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","isTyping","setIsTyping","useEffect","checkChatExists","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","q","querySnapshot","wrap","_context","prev","next","query","collection","firestore","where","getDocs","sent","empty","id","with","docs","stop","apply","arguments","docRef","doc","onSnapshot","snapshot","_snapshot$data","data","typing","_jsxs","Window","children","_jsx","Loader","color","className","Messages","map","message","senderId","style","fontSize","marginBottom","marginLeft","Message","text","nanoid","Form","onSubmit","e","preventDefault","createNewChat","then","res","addNewMessage","target","reset","onSendMessageFormSubmit","onChange","value","onFocus","chatRef","updateDoc","onBlur","disabled","type","RiSendPlaneFill","size","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","ChatItem","recepientUsername","setRecepientUsername","recepientPhoto","setRecepientPhoto","setRecepientId","fetchUserInfo","members","find","_res$val","val","username","photoUrl","avatarPlaceholder","catch","error","console","log","Item","onClick","AvatarWrapper","src","width","height","objectFit","alt","Data","fontWeight","textOverflow","overflow","whiteSpace","length","StartMessage","ChatsList","chats","setChats","getChats","forEach","push","_objectSpread","marginTop","display","position","chat"],"sourceRoot":""}