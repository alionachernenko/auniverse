{"version":3,"file":"static/js/809.2f036c58.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/UserCard/UserCard.jsx","pages/Users/Users.jsx"],"sourcesContent":["import { FidgetSpinner } from \"react-loader-spinner\";\nimport styled,  { css } from \"styled-components\";\n\nexport const Loader = ({className, color}) => {\n    return (\n        <Wrapper render={className}>\n            <FidgetSpinner backgroundColor={color} ballColors={['orange', 'darkblue', 'red']}/>\n        </Wrapper>\n    )\n}\n\n\n//=============STYLES===============//\n\n\nconst Wrapper = styled.div`\n    ${(props) => {\n        switch(props.render){\n            case 'loader-homepage': \n            return css`\n                margin-left: 60px;\n            `\n            default:\n                return css`\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translateX(-50%)\n            `\n        }\n    }}\n`\n\n","import { useContext, useEffect, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { getUserInfo, acceptInvitationAndAddUser } from \"utils/firebase\"\nimport avatarPlaceholder from '../../assets/images/avatar-placeholder.png'\nimport styled from \"styled-components\"\nimport { authContext } from \"context/context\"\n\n\n\nexport const UserCard = ({id, isPending, setPending}) => {\n    const [name, setName] = useState('')\n    const [avatar, setAvatar] = useState()\n    const { userId } = useContext(authContext)\n\n    useEffect(() => {\n        getUserInfo(id).then(res => {\n            console.log(res.val())\n            setName(res.val().username)\n            if(res.val().photoUrl) {setAvatar(res.val().photoUrl)}\n            else {setAvatar(avatarPlaceholder)}\n        })\n    }, [id])\n\n    return(\n        <Card>     \n            <CardLink style={{color: 'black'}} to={`/users/${id}`}>\n                <AvatarWrapper>\n                <img style={{objectFit: 'cover', width: 100, height: '100%'}} width={200} src={`${avatar}`} alt={`${name}'s avatar`}></img>\n            </AvatarWrapper>\n                <Username>{name}</Username>\n              \n            </CardLink>\n            {isPending && <button onClick={() =>\n                acceptInvitationAndAddUser(id, userId).then(() =>\n                        setPending(prev => prev.filter(friend => friend !== id))\n                )}>\n                Accept invitation</button>}\n        </Card>\n    )\n}\n\nconst Card = styled.li`\n    height: auto;\n    padding: 10px;\n    border-radius: 20px;\n    background-color: #00021A;\n    transform: scale(1);\n    transition: 200ms all ease;\n\n    &:hover{\n        transform: scale(0.95)\n    }\n\n    @media screen and (min-width: 768px){\n        width: 400px\n    }\n    \n`\nconst AvatarWrapper = styled.div`\n    border-radius: 100px;\n    height: 50px;\n    width: 50px;\n    overflow: hidden;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    background-color: #080D2B;\n\n    @media screen and (min-width: 420px){\n        height: 100px;\n        width: 100px;\n    }\n`\n\nconst CardLink = styled(Link)`\ndisplay: flex;\nalign-items: center;\ngap: 10px;\njustify-content: flex-start;\n`\n\nconst Username = styled.p`\n    color: white;\n    font-size: 25px;\n    font-weight: 500\n`","import { useContext, useEffect, useState } from 'react'\nimport { getUsers } from 'utils/firebase'\nimport { Loader } from 'components/Loader/Loader'\nimport {authContext} from '../../context/context'\n\nimport { UserCard } from 'components/UserCard/UserCard'\nimport styled from 'styled-components'\nimport { Container } from 'components/Container/Container'\n\nconst Users = () => {\n    const [userIDs, setUserIDs] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n    const {userId} = useContext(authContext)\n\n\n    useEffect(() => {\n        getUsers().then(res => {\n            const IDs = res.val()\n\n            setUserIDs(Object.keys(IDs).filter(ID => ID !== userId))\n            setIsLoading(false)\n        })\n    }, [userId])\n\n    return(\n        <Page>\n            <Container>\n            {isLoading ? <Loader className={'loader-profile'} color={'#00021A'} /> : \n            <UsersList>\n                {userIDs.map(userID => <UserCard id={userID}/>)}\n                    </UsersList>}\n                </Container>\n        </Page>\n    )\n}\n\nconst Page = styled.div`\npadding: 20px;\nbox-sizing: border-box;\nmin-height: calc(100vh - 61px);\nwidth: 100%; \n`\n\nconst UsersList = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n`\nexport default Users"],"names":["Loader","_ref","className","color","_jsx","Wrapper","render","children","FidgetSpinner","backgroundColor","ballColors","styled","_templateObject","_taggedTemplateLiteral","props","css","_templateObject2","_templateObject3","UserCard","id","isPending","setPending","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","avatar","setAvatar","userId","useContext","authContext","useEffect","getUserInfo","then","res","console","log","val","username","photoUrl","avatarPlaceholder","_jsxs","Card","CardLink","style","to","concat","AvatarWrapper","objectFit","width","height","src","alt","Username","onClick","acceptInvitationAndAddUser","prev","filter","friend","Link","_templateObject4","Page","UsersList","userIDs","setUserIDs","isLoading","setIsLoading","getUsers","IDs","Object","keys","ID","Container","map","userID"],"sourceRoot":""}