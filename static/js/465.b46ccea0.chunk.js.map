{"version":3,"file":"static/js/465.b46ccea0.chunk.js","mappings":"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","sources":["components/GameCard/GameCard.jsx","components/GameList/GameList.jsx","components/Loader/Loader.jsx","components/Slider/Slider.jsx","components/NewGamesSection/NewGames.jsx"],"sourcesContent":["import { Link } from \"react-router-dom\"\nimport placeholderImage from 'assets/images/placeholder.png'\nimport styled, {css} from 'styled-components'\n\nexport const GameCard = ({ data, className }) => {\n\n    const { name, released, genres, background_image, slug, rating } = data\n\n    return (\n        <Link to={`/catalog/${slug}`} aria-label={`Read more about ${name}`} state={{ from: \"/catalog\" }}>\n        <Card className={`${className}`}>\n            {background_image ? <Poster loading='lazy' src={background_image} alt={`${name} poster`} width={500}\n                height='auto' /> : <Poster src={placeholderImage}   alt='No poster here'/>}\n                <Description>\n                    <Title>\n                        {name}\n                    </Title>\n                    {released && <Year>{released.slice(0, 4)}</Year>}\n                    {genres && <Genres>\n                        {genres.map((({id, name}) => <Genre key={id}>{name}</Genre>))}\n                    </Genres>}\n                </Description>\n             <Rating className='rating'>{rating}</Rating>\n        </Card>\n    </Link>\n    )\n}\n\nconst Poster = styled.img``\n\nconst Description = styled.div``\n\nconst Year = styled.p``\n\nconst Card = styled.div`\n    ${({className}) => {\n    switch (className) {\n        case 'gamecard_catalog':\n            return css`\n                height: auto;\n                position: relative;\n                overflow: hidden;\n\n                color: white;\n                background-color: #00021A;\n                \n                clip-path: polygon(11% 0, 70% 0%, 100% 0, 100% 88%, 88% 100%, 0 100%, 0 67%, 0 11%);\n                transform: scale(1);\n                transition: 250ms transform ease;\n\n                &:hover{\n                    transform: scale(1.05);\n                }\n\n                @media screen and (min-width: 768px) {\n                    height: 500px;\n                }\n\n                & ${Poster}{\n                    height: 70%;\n                    width: 100%;\n\n                    object-fit: cover;\n                    transition: 500ms all ease;\n                }\n\n            \n                & ${Description} {\n                    padding: 15px;\n                    display: flex;\n                    flex-direction: column;\n                    gap: 5px;\n                }\n            `\n        case 'gamecard_slider':\n            return css`\n                max-width: 500px;\n                height: 350px;\n                position: relative;\n                overflow: hidden;\n                \n                clip-path: polygon(11% 0, 70% 0%, 100% 0, 100% 88%, 88% 100%, 0 100%, 0 70%, 0 11%);\n\n                & ${Description} {\n                    width: 50%;\n                    height: 100%;\n                    padding: 0 10px;\n                    box-sizing: border-box;\n\n                    display: flex;\n                    flex-direction: column;\n                    justify-content: center;\n                    gap: 15px;\n\n                    position: absolute;\n                    top: 0;;\n                    right: 100%;\n\n                    background-color: #00021A;\n                    \n                    transition: 250ms right ease;\n\n                    & ${Year}{\n                        color: white;\n                    }\n\n                }\n\n                & .rating, & ${Year} {\n                    display: none;\n                }\n\n                & ${Poster} {\n                        width: 100%;\n                        height: 100%;\n                        object-fit: cover;\n                        transition: 500ms all ease;\n                        \n                    }\n\n                &:hover ${Poster} {\n                    height: 100%;\n                    filter: blur(5px);\n                }\n\n                &:hover ${Description} {\n                    right: 50%;\n                }\n            `\n        \n        default: return css``\n        }\n    }}\n`\n\nconst Genres = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 5px;\n    \n    font-size: 15;\n    letter-spacing: 0.05em;\n    \n    color: #f0f0f0;\n`\n\nconst Genre = styled.li`\n    padding: 0 5px 0 0;\n\n    &:not(:last-child){\n    border-right: 1px solid orange;\n}\n`\n\nconst Title = styled.p`\n    color: white;\n\n    font-size: 25px;\n    font-weight: 700;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n\n    white-space: normal;\n    word-break: break-word;\n`\n\nconst Rating = styled.p`\n    display: flex;\n    align-items: center;\n    padding: 10px 10px 5px 10px;\n\n    position: absolute;\n    top: 0;\n    right: 40px;\n\n    font-size: 20px;\n    font-weight: 700;\n\n    color: white;\n    background-color: #050B2B;\n    transition: 400ms top ease;\n`","import { GameCard } from \"../GameCard/GameCard\"\nimport { Container } from \"components/Container/Container\"\nimport styled from \"styled-components\"\n\nexport const GameList = ({ games }) => {\n\n    \n    return (\n        <Container>\n            <List>\n                {\n                    games.map((game) => \n                    <Item key={game.id}>\n                        <GameCard data={game} className={'gamecard_catalog'}/>\n                    </Item>)\n                }\n            </List>\n        </Container>\n    )\n}\n\nconst List = styled.ul`\n    padding: 0 20px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 30px;\n`\n\nconst Item = styled.li`\n    width: 100%;\n\n    @media screen and (min-width: 768px) {\n        width: calc((100% - 30px)/2);\n    }\n\n    @media screen and (min-width: 1200px) {\n        width: calc((100% - 60px)/3);\n    }\n\n    @media screen and (min-width: 1440px) {\n        width: calc((100% - 90px)/4);\n    }\n`","import { FidgetSpinner } from \"react-loader-spinner\";\nimport styled,  { css } from \"styled-components\";\n\nexport const Loader = ({className, color}) => {\n    return (\n        <Wrapper render={className}>\n            <FidgetSpinner backgroundColor={color} ballColors={['orange', 'darkblue', 'red']}/>\n        </Wrapper>\n    )\n}\n\nconst Wrapper = styled.div`\n    ${(props) => {\n        switch(props.render){\n            case 'loader-homepage': \n            return css`\n                margin-left: 60px;\n            `\n            default:\n                return css`\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translateX(-50%)\n            `\n        }\n    }}\n`\n\n","/* eslint-disable array-callback-return */\nimport { Swiper, SwiperSlide } from \"swiper/react\"\nimport { GameCard } from \"components/GameCard/GameCard\";\n\nimport { Autoplay } from \"swiper\";\n\nimport 'swiper/css';\n\n\nexport const Slider = ({ games }) => {\n    console.log('render')\n    return (\n        <Swiper style={{marginLeft: 0,\n                        paddingLeft: 60}}\n            spaceBetween={30}\n            speed={3000}\n            slidesPerView={'auto'}\n            loop={true}\n            autoplay={{\n                delay: 1000,\n                pauseOnMouseEnter: true,\n                disableOnInteraction: false\n            }}\n            modules={[Autoplay]}\n        > \n            {games.map((game => \n                <SwiperSlide style={{\n                    width: 'fit-content',\n                    margin: 0,\n                    }\n                }key={game.id}>\n                    <GameCard data={game} className={'gamecard_slider'} />\n                </SwiperSlide>\n            ))}\n        </Swiper>\n    )\n}\n\n","import styled from \"styled-components\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Slider } from \"../../components/Slider/Slider\"\nimport { useState, useEffect, useContext } from \"react\";\nimport { fetchNewGames } from \"utils/rawg-api\";\nimport { breakpointContext } from '../../context/context'\nimport { GameList } from \"components/GameList/GameList\";\n\nconst NewGames = () => {\n    const { breakpoint } = useContext(breakpointContext)\n    \n    const [games, setGames] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n    const [isError, setIsError] = useState(false)\n\n    useEffect(() => {\n            fetchNewGames(1).then(({data}) => {\n            const { results } = data\n                \n            setGames(results.filter(game => game.slug !== 'atomic-heart'))\n            setIsLoading(false)\n        }).catch(error => {\n            setIsError(true)\n            setIsLoading(false)\n\n            console.log(error)\n        }\n        )\n    }, [breakpoint])\n\n    return (\n        <Section>\n            <OuterWrapper>\n            <Subtitle>New 2023</Subtitle>\n                   <InnerWrapper>\n                        <Title>What will you choose this time?</Title>\n                        {isLoading ? <Loader className={'loader-homepage'} color={'darkblue'} /> : ( isError ? \n                        <p>Something went wrong</p> : \n                        breakpoint === 'desktop' ?\n                            <Slider games={games} /> :\n                            <GameList games={games} />\n                        )}\n                    </InnerWrapper>\n            </OuterWrapper>\n        </Section>\n    )\n}\n\n\nconst Section = styled.section`\n    padding-top: 20px;\n    overflow: hidden;\n    background-color: #ffffff;\n\n    @media screen and (min-width: 1200px) {\n        padding-top: 0;\n        display: flex;\n        gap: 30px;\n    }\n`\n\nconst Title = styled.h2`\n    margin-bottom: 60px;\n    margin-left: 60px;\n\n    font-size: 40px;\n    line-height: 34px;\n\n    @media screen and (max-width: 1199px){\n        display: none\n    }   \n`\n\n\nconst InnerWrapper = styled.div`\npadding: 40px 0;\n\n    @media screen and (min-width: 1200px) {\n        padding: 100px 0;\n    }\n`\n\nconst OuterWrapper = styled.div`\n    @media screen and (min-width: 1200px) {\n        display: flex\n    }\n`\n\nconst Subtitle = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    font-size: 50px;\n    font-weight: 900;\n    line-height: 91px;\n    text-align: center;\n    letter-spacing: 0.05em;\n    text-transform: uppercase;\n    color: #ffffff;\n    \n    background-color: #00021A;\n\n    @media screen and (min-width: 420px) {\n        font-size: 72px\n    }\n\n    @media screen and (min-width: 1200px) {\n        writing-mode: vertical-rl;\n    }\n`\n\nexport default NewGames"],"names":["GameCard","_ref","data","className","name","released","genres","background_image","slug","rating","_jsx","Link","to","concat","state","from","children","_jsxs","Card","Poster","loading","src","alt","width","height","placeholderImage","Description","Title","Year","slice","Genres","map","_ref2","id","Genre","Rating","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_ref3","css","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","GameList","games","Container","List","game","Item","Loader","color","Wrapper","render","FidgetSpinner","backgroundColor","ballColors","props","Slider","console","log","Swiper","style","marginLeft","paddingLeft","spaceBetween","speed","slidesPerView","loop","autoplay","delay","pauseOnMouseEnter","disableOnInteraction","modules","Autoplay","SwiperSlide","margin","Section","InnerWrapper","OuterWrapper","Subtitle","breakpoint","useContext","breakpointContext","_useState","useState","_useState2","_slicedToArray","setGames","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isError","setIsError","useEffect","fetchNewGames","then","results","filter","catch","error"],"sourceRoot":""}