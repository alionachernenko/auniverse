{"version":3,"file":"static/js/296.9d9ff025.chunk.js","mappings":"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","sources":["components/GameCard/GameCard.jsx","components/GameList/GameList.jsx","components/Loader/Loader.jsx","components/Slider/Slider.jsx","components/NewGamesSection/NewGames.jsx"],"sourcesContent":["import { Link } from \"react-router-dom\"\nimport placeholderImage from 'assets/images/placeholder.png'\nimport styled, {css} from 'styled-components'\n\nexport const GameCard = ({ data, className }) => {\n\n    const {name, released, genres, background_image, slug, rating } = data\n\n    return (\n        <Link to={`/catalog/${slug}`} aria-label={`Read more about ${name}`}>\n        <Card className={`${className}`}>\n            {background_image ? <Poster loading='lazy' src={background_image} alt={`${name} poster`} width={500}\n                height='auto' /> : <Poster src={placeholderImage}   alt='No poster here'/>}\n                <Description>\n                    <Title>\n                        {name}\n                    </Title>\n                    {released && <Year>{released.slice(0, 4)}</Year>}\n                    {genres && <Genres>\n                        {genres.map((({id, name}) => <Genre key={id}>{name}</Genre>))}\n                    </Genres>}\n                </Description>\n             <Rating className='rating'>{rating}</Rating>\n        </Card>\n    </Link>\n    )\n}\n\nconst Poster = styled.img``\n\nconst Description = styled.div``\n\nconst Year = styled.p``\n\nconst Card = styled.div`\n    ${({className}) => {\n    switch (className) {\n        case 'gamecard_catalog':\n            return css`\n                height: auto;\n                position: relative;\n                overflow: hidden;\n\n                color: white;\n                background-color: #00021A;\n                \n                clip-path: polygon(11% 0, 70% 0%, 100% 0, 100% 88%, 88% 100%, 0 100%, 0 67%, 0 11%);\n                transform: scale(1);\n                transition: 250ms transform ease;\n\n                &:hover{\n                    transform: scale(1.05);\n                }\n\n                @media screen and (min-width: 768px) {\n                    height: 500px;\n                }\n\n                & ${Poster}{\n                    height: 70%;\n                    width: 100%;\n\n                    object-fit: cover;\n                    transition: 500ms all ease;\n                }\n\n            \n                & ${Description} {\n                    padding: 15px;\n                    display: flex;\n                    flex-direction: column;\n                    gap: 5px;\n                }\n            `\n        case 'gamecard_slider':\n            return css`\n                max-width: 500px;\n                height: 350px;\n                position: relative;\n                overflow: hidden;\n                \n                clip-path: polygon(11% 0, 70% 0%, 100% 0, 100% 88%, 88% 100%, 0 100%, 0 70%, 0 11%);\n\n                & ${Description} {\n                    width: 50%;\n                    height: 100%;\n                    padding: 0 10px;\n                    box-sizing: border-box;\n\n                    display: flex;\n                    flex-direction: column;\n                    justify-content: center;\n                    gap: 15px;\n\n                    position: absolute;\n                    top: 0;;\n                    right: 100%;\n\n                    background-color: #00021A;\n                    \n                    transition: 250ms right ease;\n\n                    & ${Year}{\n                        color: white;\n                    }\n\n                }\n\n                & .rating, & ${Year} {\n                    display: none;\n                }\n\n                & ${Poster} {\n                        width: 100%;\n                        height: 100%;\n                        object-fit: cover;\n                        transition: 500ms all ease;\n                        \n                    }\n\n                &:hover ${Poster} {\n                    height: 100%;\n                    filter: blur(5px);\n                }\n\n                &:hover ${Description} {\n                    right: 50%;\n                }\n            `\n        \n        default: return css``\n        }\n    }}\n`\n\nconst Genres = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 5px;\n    \n    font-size: 15;\n    letter-spacing: 0.05em;\n    \n    color: #f0f0f0;\n`\n\nconst Genre = styled.li`\n    padding: 0 5px 0 0;\n\n    &:not(:last-child){\n    border-right: 1px solid orange;\n}\n`\n\nconst Title = styled.p`\n    color: white;\n\n    font-size: 25px;\n    font-weight: 700;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n\n    white-space: normal;\n    word-break: break-word;\n`\n\nconst Rating = styled.p`\n    display: flex;\n    align-items: center;\n    padding: 10px 10px 5px 10px;\n\n    position: absolute;\n    top: 0;\n    right: 40px;\n\n    font-size: 20px;\n    font-weight: 700;\n\n    color: white;\n    background-color: #050B2B;\n    transition: 400ms top ease;\n`","import { GameCard } from \"../GameCard/GameCard\"\nimport { Container } from \"components/Container/Container\"\nimport styled from \"styled-components\"\n\nexport const GameList = ({ games }) => {\n\n    return (\n        <Container>\n            <List>\n                {\n                    games.map((game) => \n                    <Item key={game.id}>\n                        <GameCard data={game} className={'gamecard_catalog'}/>\n                    </Item>)\n                }\n            </List>\n        </Container>\n    )\n}\n\nconst List = styled.ul`\n    padding: 0 20px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 30px;\n`\n\nconst Item = styled.li`\n    width: 100%;\n\n    @media screen and (min-width: 768px) {\n        width: calc((100% - 30px)/2);\n    }\n\n    @media screen and (min-width: 1200px) {\n        width: calc((100% - 60px)/3);\n    }\n\n    @media screen and (min-width: 1440px) {\n        width: calc((100% - 90px)/4);\n    }\n`","import { FidgetSpinner } from \"react-loader-spinner\";\nimport styled,  { css } from \"styled-components\";\n\nexport const Loader = ({className, color}) => {\n    return (\n        <Wrapper render={className}>\n            <FidgetSpinner backgroundColor={color} ballColors={['orange', 'darkblue', 'red']}/>\n        </Wrapper>\n    )\n}\n\nconst Wrapper = styled.div`\n    ${(props) => {\n        switch(props.render){\n            case 'loader-homepage': \n            return css`\n                margin-left: 60px;\n            `\n            default:\n                return css`\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translateX(-50%)\n            `\n        }\n    }}\n`\n\n","/* eslint-disable array-callback-return */\nimport { Swiper, SwiperSlide } from \"swiper/react\"\nimport { GameCard } from \"components/GameCard/GameCard\";\n\nimport { Autoplay } from \"swiper\";\n\nimport 'swiper/css';\n\n\nexport const Slider = ({games}) => {\n    return (\n        <Swiper style={{marginLeft: 0,\n                        paddingLeft: 60}}\n            spaceBetween={30}\n            speed={3000}\n            slidesPerView={'auto'}\n            loop={true}\n            autoplay={{\n                delay: 1000,\n                pauseOnMouseEnter: true,\n                disableOnInteraction: false\n            }}\n            modules={[Autoplay]}\n        > \n            {games.map((game => \n                <SwiperSlide style={{\n                    width: 'fit-content',\n                    margin: 0,\n                    }\n                }key={game.id}>\n                    <GameCard data={game} className={'gamecard_slider'} />\n                </SwiperSlide>\n            ))}\n        </Swiper>\n    )\n}\n\n","import styled from \"styled-components\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Slider } from \"../../components/Slider/Slider\"\nimport { useState, useEffect, useContext } from \"react\";\nimport { getNewGames } from \"services/games-api\";\nimport {breakpointContext} from '../../context/context'\nimport { GameList } from \"components/GameList/GameList\";\n\nconst NewGames = () => {\n    const { breakpoint } = useContext(breakpointContext)\n    \n    const [games, setGames] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n    const [isError, setIsError] = useState(false)\n\n\n    useEffect(() => {\n            getNewGames(1).then(({data}) => {\n            const { results } = data\n                \n            setGames(results.filter(game => game.slug !== 'atomic-heart'))\n            setIsLoading(false)\n        }).catch(error => {\n            setIsError(true)\n            setIsLoading(false)\n\n            console.log(error)\n        }\n        )\n    }, [breakpoint])\n\n    return (\n        <Section>\n            <OuterWrapper>\n            <Subtitle>New 2023</Subtitle>\n                   <InnerWrapper>\n                        <Title>What will you choose this time?</Title>\n                        {isLoading ? <Loader className={'loader-homepage'} color={'darkblue'} /> : ( isError ? \n                        <p>Something went wrong</p> : \n                        breakpoint === 'desktop' ?\n                            <Slider games={games} /> :\n                            <GameList games={games} />\n                        )}\n                    </InnerWrapper>\n            </OuterWrapper>\n        </Section>\n    )\n}\n\n\nconst Section = styled.section`\n    padding-top: 20px;\n    overflow: hidden;\n    background-color: #ffffff;\n\n    @media screen and (min-width: 1200px) {\n        padding-top: 0;\n        display: flex;\n        gap: 30px;\n    }\n`\n\nconst Title = styled.h2`\n    margin-bottom: 60px;\n    margin-left: 60px;\n\n    font-size: 40px;\n    line-height: 34px;\n\n    @media screen and (max-width: 1199px){\n        display: none\n    }   \n`\n\n\nconst InnerWrapper = styled.div`\npadding: 40px 0;\n\n    @media screen and (min-width: 1200px) {\n        padding: 100px 0;\n    }\n`\n\nconst OuterWrapper = styled.div`\n    @media screen and (min-width: 1200px) {\n        display: flex\n    }\n`\n\nconst Subtitle = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    font-size: 50px;\n    font-weight: 900;\n    line-height: 91px;\n    text-align: center;\n    letter-spacing: 0.05em;\n    text-transform: uppercase;\n    color: #ffffff;\n    \n    background-color: #00021A;\n\n    @media screen and (min-width: 420px) {\n        font-size: 72px\n    }\n\n    @media screen and (min-width: 1200px) {\n        writing-mode: vertical-rl;\n    }\n`\n\nexport default NewGames"],"names":["GameCard","data","className","name","released","genres","background_image","slug","rating","to","Card","Poster","loading","src","alt","width","height","placeholderImage","Description","Title","Year","slice","Genres","map","id","Genre","Rating","styled","css","GameList","games","List","game","Item","Loader","color","Wrapper","render","backgroundColor","ballColors","props","Slider","style","marginLeft","paddingLeft","spaceBetween","speed","slidesPerView","loop","autoplay","delay","pauseOnMouseEnter","disableOnInteraction","modules","Autoplay","margin","Section","InnerWrapper","OuterWrapper","Subtitle","breakpoint","useContext","breakpointContext","useState","setGames","isLoading","setIsLoading","isError","setIsError","useEffect","getNewGames","then","results","filter","catch","error","console","log"],"sourceRoot":""}