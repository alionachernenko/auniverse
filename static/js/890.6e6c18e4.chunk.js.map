{"version":3,"file":"static/js/890.6e6c18e4.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/StoresList/StoresList.jsx","components/ToggleFavouriteButton/ToggleFavouriteButton.jsx","pages/GameDescription/GameDescription.jsx"],"sourcesContent":["import { FidgetSpinner } from \"react-loader-spinner\";\nimport styled,  { css } from \"styled-components\";\n\nexport const Loader = ({className, color}) => {\n    return (\n        <Wrapper render={className}>\n            <FidgetSpinner backgroundColor={color} ballColors={['orange', 'darkblue', 'red']}/>\n        </Wrapper>\n    )\n}\n\n\n//=============STYLES===============//\n\n\nconst Wrapper = styled.div`\n    ${(props) => {\n        switch(props.render){\n            case 'loader-homepage': \n            return css`\n                margin-left: 60px;\n            `\n            default:\n                return css`\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translateX(-50%)\n            `\n        }\n    }}\n`\n\n","import { FaPlaystation, FaSteam, FaAppStore, FaXbox, FaGooglePlay, FaItchIo } from 'react-icons/fa'\nimport { SiGogdotcom, SiNintendo, SiEpicgames } from 'react-icons/si'\nimport {RiXboxLine} from 'react-icons/ri'\nimport styled from 'styled-components'\n\nexport const StoresList = ({stores}) => {\n    return (\n        <List>\n            {stores.map(({store}) => {\n                const {name, domain} = store\n                return(<li><a href={`https://${domain}`}>\n                    {name === 'Steam' && <FaSteam />}\n                    {name === 'PlayStation Store' && <FaPlaystation />}\n                    {name === 'App Store' && <FaAppStore />}\n                    {name === 'GOG' && <SiGogdotcom />}\n                    {name === 'Xbox Store' && <FaXbox />}\n                    {name === 'Xbox 360 Store' && <RiXboxLine />}\n                    {name === 'Nintendo Store' && <SiNintendo />}\n                    {name === 'Epic Games' && <SiEpicgames />}\n                    {name === 'Google Play' && <FaGooglePlay />}\n                    {name === 'itch.io' && <FaItchIo />}\n                </a></li>)\n            })}\n        </List>\n    )\n    \n}\n\nconst List =  styled.ul`\n    list-style: none;\n    display: flex;\n    margin-bottom: 20px;\n\n    & :not(:last-child) {\n        margin-right: 20px;\n    }\n\n    & svg {\n        width: 30px;\n        height: 30px;\n    }\n`\n\n","import { useContext, useEffect, useState } from \"react\"\nimport authContext from '../../context/context'\nimport { removeGameFromFavourite, addGameToFavourite, getFavouriteGames } from \"utils/firebase\"\nimport { FaHeart, FaHeartBroken } from \"react-icons/fa\"\nimport styled from \"styled-components\"\n\nexport const ToggleFavouriteButton = ({gameData}) => {\n    const {userId} = useContext(authContext)\n    const [isFavourite, setIsFavourite] = useState()\n\n    useEffect(() => {\n        getFavouriteGames(userId).then(res => {\n            if(res.val()) setIsFavourite(Object.keys(res.val()).some(el => el === gameData.slug))\n        })\n    }, [gameData.slug, userId, isFavourite])\n\n        return (\n            <>{isFavourite ? <Button type=\"button\" onClick={() => {\n                removeGameFromFavourite(userId, gameData.slug)\n                setIsFavourite(false)\n            }}><FaHeartBroken size='30px' fill=\"orange\"/></Button> :\n            <Button type=\"button\" onClick={() => {\n                addGameToFavourite(userId, gameData.slug, gameData)\n                setIsFavourite(true)\n            }}><FaHeart size='30px' fill=\"orange\"/></Button>}</>\n        )\n    }\n\nconst Button = styled.button`\n    background-color: white;\n    height: auto;\n    width: auto;\n    border: none;\n    border-radius: 3px;\n    display: flex;\n    align-items: center;\n    justify-content: center\n`","import { useContext, useEffect, useState } from \"react\"\nimport {  useParams } from \"react-router-dom\"\nimport { getGameById, getScreenshots} from \"../../services/games-api\"\nimport { StoresList } from \"components/StoresList/StoresList\";\nimport { Loader } from \"../../components/Loader/Loader\";\nimport authContext from '../../context/context'\nimport styled, {css} from \"styled-components\";\nimport { ToggleFavouriteButton } from \"components/ToggleFavouriteButton/ToggleFavouriteButton\";\n\nconst GameDescription = () => {\n    const {isLoggedIn} = useContext(authContext)\n\n    const [title, setTitle] = useState('')\n    const [poster, setPoster] = useState()\n    const [screenshots, setScreenshots] = useState([])\n    const [showScreenshots, setShowScreenshots] = useState(false)\n    const [description, setDescription] = useState()\n    const [stores, setStores] = useState()\n    const [year, setYear] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [gameData, setGameData] = useState({})\n\n    const { gameSlug } = useParams()\n\n    window.scroll({\n        top: 0,\n    });\n\n    useEffect(() => {\n        Promise.all([getGameById(gameSlug), getScreenshots(gameSlug)]).then(res => {\n            const [game, screenshots] = res\n            const {data} = game\n            const {name, background_image, description_raw, stores, released} = data\n            const {results} = screenshots.data\n\n            setGameData(data)\n            setTitle(name)\n            setPoster(background_image)\n            setDescription(description_raw)\n            setStores(stores)\n            setYear(released.slice(0, 4))\n            setScreenshots(results)\n\n            setIsLoading(false)\n        }).catch(error => {\n            console.log(error)\n            setIsLoading(false)\n        })\n        \n    }, [gameSlug])\n\n    const toggleShowScreenshots = () => {\n        setShowScreenshots(prevState => !prevState)\n    }\n\n    return (\n        <Page background={poster}>\n            {isLoading ? <Loader color={'white'} /> :\n                <><Meta>\n                    <Title>{title}</Title>\n                    {year && <Year>{year}</Year>}\n                    {isLoggedIn &&\n                        <ToggleFavouriteButton gameData={gameData}/>\n                    }\n                </Meta>\n                    {stores && <StoresList stores={stores}/>}\n                    {description && <Overview>{description}</Overview>}\n                    {screenshots.length !== 0 && <ToggleScreenshotsButton type=\"button\" onClick={toggleShowScreenshots}>\n                        {showScreenshots ? 'Hide' : 'Show'} screenshots</ToggleScreenshotsButton>}\n                    {showScreenshots &&\n                        <ul>\n                            {screenshots.map(({image}) => \n                            <li style={{width: 'auto'}}>\n                                <Screenshot src={image} alt='fdff' />\n                            </li>)}\n                        </ul>}</>}\n                \n        </Page>\n    )\n}\n\nconst Page = styled.div`\n    padding: 20px;\n    height: calc(100vh - 61px);\n    background-size: cover;\n    background-position: top;\n    // backdrop-filter: brightness(30%);\n    overflow-y: scroll;\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n\n    ${props => css`\n        background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),\n        url(${props.background})\n        `\n    }}\n\n    \n`\nconst Meta = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-bottom: 20px;\n    gap: 10px;\n\n    @media screen and (min-width: 1200px) {\n        flex-direction: row;\n        gap: 20px;\n    }\n`\nconst Title = styled.h1`\n    color: white;\n    font-weight: 700;\n    text-align: center;\n    font-size: 35px;\n\n    \n    @media screen and (min-width: 1200px) {\n        font-size: 50px;\n        border-right: 1px solid orange;\n        padding-right: 20px\n    }\n`\nconst Year = styled.p`\n    color: white;\n    font-weight: 700;\n    text-align: center;\n    font-size: 30px;\n\n    @media screen and (min-width: 1200px) {\n        font-size: 50px;\n    }\n`\nconst Overview = styled.p`\n    color: white;\n    background-color: rgba(59, 57, 57, 0.357);\n    max-width: 80vw;\n    font-size: 20px;\n    padding: 10px 20px;\n    line-height: 35px;\n    margin-bottom: 20px;\n    border-radius: 20px;\n`\n\nconst Screenshot = styled.img`\n    height: auto;\n    width: 100%;\n    max-width: 1000px;\n`\n\nconst ToggleScreenshotsButton = styled.button`\n    color: white;\n    margin-bottom: 20px;\n    font-size: 20px;\n    cursor: pointer;\n    background-color: #080D2B;\n    padding: 8px 16px;\n    border: none;\n    font-family: 'Nunito', sans-serif\n`\n\nexport default GameDescription"],"names":["Loader","_ref","className","color","_jsx","Wrapper","render","children","FidgetSpinner","backgroundColor","ballColors","styled","_templateObject","_taggedTemplateLiteral","props","css","_templateObject2","_templateObject3","StoresList","stores","List","map","_ref2","store","name","domain","_jsxs","href","concat","FaSteam","FaPlaystation","FaAppStore","SiGogdotcom","FaXbox","RiXboxLine","SiNintendo","SiEpicgames","FaGooglePlay","FaItchIo","ToggleFavouriteButton","gameData","userId","useContext","authContext","_useState","useState","_useState2","_slicedToArray","isFavourite","setIsFavourite","useEffect","getFavouriteGames","then","res","val","Object","keys","some","el","slug","_Fragment","Button","type","onClick","removeGameFromFavourite","FaHeartBroken","size","fill","addGameToFavourite","FaHeart","Page","background","Meta","Title","_templateObject4","Year","_templateObject5","Overview","_templateObject6","Screenshot","_templateObject7","ToggleScreenshotsButton","_templateObject8","isLoggedIn","title","setTitle","_useState3","_useState4","poster","setPoster","_useState5","_useState6","screenshots","setScreenshots","_useState7","_useState8","showScreenshots","setShowScreenshots","_useState9","_useState10","description","setDescription","_useState11","_useState12","setStores","_useState13","_useState14","year","setYear","_useState15","_useState16","isLoading","setIsLoading","_useState17","_useState18","setGameData","gameSlug","useParams","window","scroll","top","Promise","all","getGameById","getScreenshots","_res","game","data","background_image","description_raw","released","results","slice","catch","error","console","log","length","prevState","image","style","width","src","alt"],"sourceRoot":""}