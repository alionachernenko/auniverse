{"version":3,"file":"static/js/476.fccb6b6b.chunk.js","mappings":"mWAEaA,EAAa,SAAHC,GAAoC,IAA9BC,EAAID,EAAJC,KAAMC,EAAKF,EAALE,MAAOC,EAASH,EAATG,UACxC,OACEC,EAAAA,EAAAA,MAACC,EAAI,CAACF,UAAS,mBAAAG,OAAqBH,GAAYI,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,MAAOT,EAAMU,OAAQV,EAAMW,gBAAiBV,MAC1DM,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,MAAOT,EAAMU,OAAQV,EAAMW,gBAAiBV,MAC1DM,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,MAAOT,EAAMU,OAAQV,EAAMW,gBAAiBV,OAGhE,EAEMW,GAAkBC,EAAAA,EAAAA,IAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wEAO3BX,EAAOY,EAAAA,GAAAA,IAAUC,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,gfAyBNH,GCxBJM,EAAO,WAClB,IAAAC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAvCG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAwCJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAoCR,EAAAA,EAAAA,WAAS,GAAMS,GAAAb,EAAAA,EAAAA,GAAAY,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GACxBG,GAAWC,EAAAA,EAAAA,YAAWC,EAAAA,IAAtBF,OACRG,GAAkCf,EAAAA,EAAAA,WAAS,GAAMgB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAgCnB,EAAAA,EAAAA,WAAS,GAAMoB,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtBG,EAAS1B,EAAa2B,IAAI,MAC1BC,EAAc5B,EAAa2B,IAAI,SAErCE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,eAAAtD,GAAAuD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIrB,OAHKL,GAAIM,EAAAA,EAAAA,KACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAW,UACtBC,EAAAA,EAAAA,IAAM,UAAW,iBAAkBhB,IACpCU,EAAAE,KAAA,GAC2BK,EAAAA,EAAAA,IAAQV,GAAG,KAAD,EAAhCC,EAAaE,EAAAQ,KACnBhC,GAAesB,EAAcW,OACxBX,EAAcW,MAKd9C,EAAgB,CAAE+C,GAAI,MAAOC,KAAMrB,GAAe,SAJrD3B,EAAgB,CACd+C,GAAIZ,EAAcc,KAAK,GAAGF,GAC1BC,KAAMrB,GAAe,SAEwC,wBAAAU,EAAAa,OAAA,GAAAjB,EAAA,KAClE,kBAboB,OAAA1D,EAAA4E,MAAA,KAAAC,UAAA,KAcrBvB,GACF,GAAG,CAACF,EAAa3B,KAEjB4B,EAAAA,EAAAA,YAAU,WACR,GAAIH,GAAqB,QAAXA,EAAkB,CAC9B,IAAM4B,GAASC,EAAAA,EAAAA,IAAIZ,EAAAA,GAAW,QAASjB,IACvC8B,EAAAA,EAAAA,IAAWF,GAAQ,SAAAG,GAAa,IAADC,EAAAC,EAAAC,EAC7BtD,EAA2B,QAAhBoD,EAACD,EAASI,cAAM,IAAAH,OAAA,EAAfA,EAAiBrD,UACV,QAAfsD,EAAAF,EAASI,cAAM,IAAAF,GAAfA,EAAiBG,SAAyB,QAAfF,EAAAH,EAASI,cAAM,IAAAD,OAAA,EAAfA,EAAiBE,UAAW/C,EACzDU,EAAYgC,EAASI,OAAOC,QACvBrC,GAAY,EACrB,GACF,CACF,GAAG,CAACZ,EAAYa,EAAQX,IAwCxB,OACEnC,EAAAA,EAAAA,MAACmF,EAAM,CAAAhF,SAAA,CACJ8B,GAAcO,GACbpC,EAAAA,EAAAA,KAACgF,EAAAA,EAAM,CAACtF,MAAM,UAAUC,UAAU,gBAElC0B,IACErB,EAAAA,EAAAA,KAACiF,EAAQ,CAAAlF,SACNsB,EAAS6D,KAAI,SAAAC,GAAO,OACnBvF,EAAAA,EAAAA,MAAA,OAAAG,SAAA,CACGoF,EAAQC,WAAarD,IACpB/B,EAAAA,EAAAA,KAAA,KACEC,MAAO,CACLoF,SAAU,GACV3F,MAAO,OACP4F,aAAc,EACdC,WAAY,IACZxF,SACH,SAIHC,EAAAA,EAAAA,KAACwF,EAAO,CACN7F,UAAWwF,EAAQC,WAAarD,EAAS,OAAS,WAAWhC,SAE5DoF,EAAQM,SAhBHN,EAAQnB,GAkBZ,OAKD,QAAXtB,GAAoC,SAAhBE,KACpBhD,EAAAA,EAAAA,MAAC8F,EAAI,CAACC,SAAU,SAAAC,GAAC,OAtES,SAAAA,GAC9BvD,GAAa,GACb,IAAM8C,EAAU,CACdC,SAAUrD,EACV0D,KAAMhE,EACNuC,IAAI6B,EAAAA,EAAAA,OAGND,EAAEE,iBACa,QAAXpD,GACFqD,EAAAA,EAAAA,IAAchE,EAAQa,EAAauC,GAASa,MAAK,SAAAC,GAAG,OAClDhF,EAAgB,CAAE+C,GAAIiC,EAAIjC,GAAIC,KAAMrB,GAAc,KAGpDsD,EAAAA,EAAAA,IAAcxD,EAAQyC,GAExBS,EAAEO,OAAOC,QACT/D,GAAa,EACf,CAoD2BgE,CAAwBT,EAAE,EAAC7F,SAAA,CAClC,QAAX2C,GAAoBF,IAAaI,IAChC5C,EAAAA,EAAAA,KAACT,EAAU,CAACE,KAAM,GAAIC,MAAM,UAAUC,UAAU,WAElDK,EAAAA,EAAAA,KAAA,YACEsG,SAAU,SAAAV,GACRlE,EAAgBkE,EAAEO,OAAOI,MAC3B,EACAC,QAjDM,WACd,GAAI9D,GAAqB,QAAXA,EAAkB,CAC9B,IAAM+D,GAAUlC,EAAAA,EAAAA,IAAIZ,EAAAA,GAAW,QAASjB,IACxCgE,EAAAA,EAAAA,IAAUD,EAAS,CACjB3B,OAAQ/C,GAEZ,CACF,EA2CU4E,OA3DK,WACb,GAAIjE,GAAqB,QAAXA,EAAkB,CAC9B,IAAM+D,GAAUlC,EAAAA,EAAAA,IAAIZ,EAAAA,GAAW,QAASjB,IACxCgE,EAAAA,EAAAA,IAAUD,EAAS,CACjB3B,OAAQ,MAEZ,CACF,KAsDQ9E,EAAAA,EAAAA,KAAA,UAAQ4G,UAAWnF,EAAaoF,OAAOC,OAAQC,KAAK,SAAQhH,UAC1DC,EAAAA,EAAAA,KAACgH,EAAAA,IAAe,CAACvH,KAAK,OAAOC,MAAM,iBAM/C,EAEMqF,EAAStE,EAAAA,GAAAA,IAAUF,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+IAQnBgF,EAAU/E,EAAAA,GAAAA,GAASC,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sTAkBnBkF,EAAOjF,EAAAA,GAAAA,KAAWwG,IAAAA,GAAAzG,EAAAA,EAAAA,GAAA,osBAwClByE,EAAWxE,EAAAA,GAAAA,GAASyG,IAAAA,GAAA1G,EAAAA,EAAAA,GAAA,4G,UC/Mb2G,EAAW,SAAH3H,GAAkB,IAAZqF,EAAIrF,EAAJqF,KACzBjE,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAkDC,EAAAA,EAAAA,YAAUC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAArDkG,EAAiBhG,EAAA,GAAEiG,EAAoBjG,EAAA,GAC9CG,GAA4CJ,EAAAA,EAAAA,YAAUK,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAA/C+F,EAAc9F,EAAA,GAAE+F,EAAiB/F,EAAA,GACxCG,GAAsCR,EAAAA,EAAAA,YAAUS,GAAAb,EAAAA,EAAAA,GAAAY,EAAA,GAAzCiB,EAAWhB,EAAA,GAAE4F,EAAc5F,EAAA,GAClCM,GAAgCf,EAAAA,EAAAA,WAAS,GAAMgB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAxCM,EAAQL,EAAA,GAAEM,EAAWN,EAAA,GAC5BG,GAAkCnB,EAAAA,EAAAA,WAAS,GAAMoB,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAA1CF,EAASG,EAAA,GAAEF,EAAYE,EAAA,GACtBR,GAAWC,EAAAA,EAAAA,YAAWC,EAAAA,IAAtBF,OACFW,EAAS1B,EAAa2B,IAAI,MAE1B8E,GAAWC,EAAAA,EAAAA,UACf,kBAAM7C,EAAK8C,QAAQC,MAAK,SAAA5D,GAAE,OAAIA,IAAOjC,CAAM,GAAC,GAC5C,CAAC8C,EAAK8C,QAAS5F,IAgCjB,OA7BAc,EAAAA,EAAAA,YAAU,WACRR,GAAa,IACbwF,EAAAA,EAAAA,IAAcJ,GACXzB,MAAK,SAAAC,GACJ,IAAA6B,EAAmC7B,EAAI8B,MAA/BC,EAAQF,EAARE,SAAUC,EAAQH,EAARG,SAAUjE,EAAE8D,EAAF9D,GAE5BqD,EAAqBW,GACrBT,EAA0B,OAARU,QAAQ,IAARA,EAAAA,EAAYC,GAC9BV,EAAexD,GACf3B,GAAa,EACf,IACC8F,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZ/F,GAAa,EACf,IACCkG,SAAQ,kBAAMlG,GAAa,EAAM,GACtC,GAAG,CAACoF,EAAU1F,KAEdc,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAQ,CACV,IAAM4B,GAASC,EAAAA,EAAAA,IAAIZ,EAAAA,GAAW,QAASjB,IACvC8B,EAAAA,EAAAA,IAAWF,GAAQ,SAAAG,GAAa,IAADC,EAAAC,EACV,QAAfD,EAAAD,EAASI,cAAM,IAAAH,GAAfA,EAAiBI,SAAyB,QAAfH,EAAAF,EAASI,cAAM,IAAAF,OAAA,EAAfA,EAAiBG,UAAW/C,EACzDU,EAAYgC,EAASI,OAAOC,QACvBrC,GAAY,EACrB,GACF,CACF,GAAG,CAACC,EAAQX,KAGVnC,EAAAA,EAAAA,MAAC4I,EAAI,CACHC,QAAS,kBAAMxH,EAAgB,CAAE+C,GAAIa,EAAKb,GAAIC,KAAMrB,GAAc,EAClEjD,UAAW+C,IAAWmC,EAAKb,IAAM,WAAWjE,SAAA,EAG5CC,EAAAA,EAAAA,KAAC0I,EAAa,CAAA3I,UACVqC,IACApC,EAAAA,EAAAA,KAAA,OACE2I,IAAKrB,EACLrH,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQyI,UAAW,SACnDC,IAAI,cAIVjJ,EAAAA,EAAAA,MAACkJ,EAAI,CAAA/I,SAAA,CACDqC,GAGApC,EAAAA,EAAAA,KAAA,WAFAA,EAAAA,EAAAA,KAAA,KAAGC,MAAO,CAAE8I,WAAY,KAAMhJ,SAAEqH,IAIhChF,GAWApC,EAAAA,EAAAA,KAAA,WAVAA,EAAAA,EAAAA,KAAA,KACEC,MAAO,CACL+I,aAAc,WACdC,SAAU,SACVC,WAAY,UACZnJ,SAED8E,EAAKxD,SAASwD,EAAKxD,SAASyF,OAAS,GAAGrB,UAM9CjD,IAAaI,IACZ5C,EAAAA,EAAAA,KAACT,EAAU,CAACE,KAAM,EAAGC,MAAM,QAAQC,UAAU,YAhC1CkF,EAAKb,GAoChB,EAEMwE,EAAO/H,EAAAA,GAAAA,GAASF,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wWAoBhBkI,EAAgBjI,EAAAA,GAAAA,IAAUC,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+JAU1BsI,EAAOrI,EAAAA,GAAAA,IAAUwG,IAAAA,GAAAzG,EAAAA,EAAAA,GAAA,wRCtDjB2I,EAAe1I,EAAAA,GAAAA,EAAQF,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mMAWvB4I,EAAY3I,EAAAA,GAAAA,GAASC,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sLAW3B,EAnFqB,WACnB,IAAAU,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAA/BmI,EAAKjI,EAAA,GAAEkI,EAAQlI,EAAA,GACtBR,GAAuBC,EAAAA,EAAAA,MAAhBG,GAAiCD,EAAAA,EAAAA,GAAAH,EAAA,GAArB,GACnBW,GAAkCJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAA1Ca,EAASZ,EAAA,GAAEa,EAAYb,EAAA,GACtBO,GAAWC,EAAAA,EAAAA,YAAWC,EAAAA,IAAtBF,OACFW,EAAS1B,EAAa2B,IAAI,MAC1BC,EAAc5B,EAAa2B,IAAI,SAErCE,EAAAA,EAAAA,YAAU,WACRR,GAAa,GACbkH,EAASxH,EACX,GAAG,CAACA,IAEJ,IAAMwH,EAAW,SAAAxH,GACf,IAAMoB,GAAIM,EAAAA,EAAAA,KACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAW,UACtBC,EAAAA,EAAAA,IAAM,UAAW,iBAAkB7B,KAGrCyC,EAAAA,EAAAA,IAAWrB,GAAG,SAAAC,GACZ,IAAMiG,EAAQ,GACdjG,EAAcoG,SAAQ,SAAAjF,GACpB8E,EAAMI,MAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAInF,EAAIM,QAAM,IAAEb,GAAIO,EAAIP,KACtC,IACAsF,EAASD,GACThH,GAAa,EACf,GACF,EAEA,OACErC,EAAAA,EAAAA,KAAA,OACEC,MAAO,CACLE,OAAQ,qBACRwJ,UAAW,GACXC,QAAS,OACTC,SAAU,YACV9J,SAEDqC,GACCpC,EAAAA,EAAAA,KAACgF,EAAAA,GAAM,CAACtF,MAAM,aAEdE,EAAAA,EAAAA,MAAAkK,EAAAA,SAAA,CAAA/J,SAAA,EACEC,EAAAA,EAAAA,KAACoJ,EAAS,CAAArJ,SACPsJ,EAAMnE,KAAI,SAAA6E,GAAI,OACb/J,EAAAA,EAAAA,KAACmH,EAAQ,CAACtC,KAAMkF,GAAWA,EAAK/F,GAAM,MAG9B,QAAXtB,GAAqC,IAAjB2G,EAAMvC,QAAgC,SAAhBlE,GACzC5C,EAAAA,EAAAA,KAACmJ,EAAY,CAAApJ,SAAC,0BACI,SAAhB6C,GACF5C,EAAAA,EAAAA,KAACmJ,EAAY,CAAApJ,SAAC,kBACD,QAAX2C,IACF1C,EAAAA,EAAAA,KAACmJ,EAAY,CAAApJ,SAAC,kBAEhBC,EAAAA,EAAAA,KAACW,EAAI,QAKf,C","sources":["components/TypingDots/TypingDots.jsx","components/Chat.jsx","components/ChatItem/ChatItem.jsx","pages/MessagesPage/MessagesPage.jsx"],"sourcesContent":["import styled, { keyframes } from 'styled-components';\n\nexport const TypingDots = ({ size, color, className }) => {\n  return (\n    <Dots className={`bouncing-loader ${className}`}>\n      <div style={{ width: size, height: size, backgroundColor: color }}></div>\n      <div style={{ width: size, height: size, backgroundColor: color }}></div>\n      <div style={{ width: size, height: size, backgroundColor: color }}></div>\n    </Dots>\n  );\n};\n\nconst loaderAnimation = keyframes`\nto {\n    opacity: 0.1;\n    transform: translateY(-5px);\n}\n`;\n\nconst Dots = styled.div`\n  display: flex;\n  justify-content: center;\n  position: absolute;\n\n  &.large {\n    bottom: 110%;\n\n    & > div {\n      margin: 3px 6px;\n    }\n  }\n\n  &.small {\n    top: 15px;\n    right: 10px;\n\n    & > div {\n      margin: 3px 2px;\n    }\n  }\n\n  & > div {\n    border-radius: 50%;\n    opacity: 1;\n    animation: ${loaderAnimation} 0.6s infinite alternate;\n  }\n\n  & > div:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n\n  & > div:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n`;\n","import { firestore } from 'config/firebase';\nimport { authContext } from 'context';\nimport { query } from 'firebase/database';\nimport {\n  collection,\n  doc,\n  getDocs,\n  onSnapshot,\n  updateDoc,\n  where,\n} from 'firebase/firestore';\nimport { useContext, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { addNewMessage, createNewChat } from 'utils';\nimport { Loader } from './Loader/Loader';\nimport { RiSendPlaneFill } from 'react-icons/ri';\nimport { nanoid } from 'nanoid';\nimport { TypingDots } from './TypingDots/TypingDots';\n\nexport const Chat = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [messages, setMessages] = useState(null);\n  const [messageValue, setMessageValue] = useState('');\n  const [chatExists, setChatExists] = useState(false);\n  const { userId } = useContext(authContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const chatId = searchParams.get('id');\n  const recepientId = searchParams.get('with');\n\n  useEffect(() => {\n    const checkChatExists = async () => {\n      const q = query(\n        collection(firestore, 'chats'),\n        where('members', 'array-contains', recepientId)\n      );\n      const querySnapshot = await getDocs(q);\n      setChatExists(!querySnapshot.empty);\n      if (!querySnapshot.empty)\n        setSearchParams({\n          id: querySnapshot.docs[0].id,\n          with: recepientId || 'none',\n        });\n      else setSearchParams({ id: 'new', with: recepientId || 'none' });\n    };\n    checkChatExists();\n  }, [recepientId, setSearchParams]);\n\n  useEffect(() => {\n    if (chatId && chatId !== 'new') {\n      const docRef = doc(firestore, 'chats', chatId);\n      onSnapshot(docRef, snapshot => {\n        setMessages(snapshot.data()?.messages);\n        if (snapshot.data()?.typing && snapshot.data()?.typing !== userId) {\n          setIsTyping(snapshot.data().typing);\n        } else setIsTyping(false);\n      });\n    }\n  }, [chatExists, chatId, userId]);\n\n  const onSendMessageFormSubmit = e => {\n    setIsLoading(true);\n    const message = {\n      senderId: userId,\n      text: messageValue,\n      id: nanoid(),\n    };\n\n    e.preventDefault();\n    if (chatId === 'new') {\n      createNewChat(userId, recepientId, message).then(res =>\n        setSearchParams({ id: res.id, with: recepientId })\n      );\n    } else {\n      addNewMessage(chatId, message);\n    }\n    e.target.reset();\n    setIsLoading(false);\n  };\n\n  const onBlur = () => {\n    if (chatId && chatId !== 'new') {\n      const chatRef = doc(firestore, 'chats', chatId);\n      updateDoc(chatRef, {\n        typing: null,\n      });\n    }\n  };\n\n  const onFocus = () => {\n    if (chatId && chatId !== 'new') {\n      const chatRef = doc(firestore, 'chats', chatId);\n      updateDoc(chatRef, {\n        typing: userId,\n      });\n    }\n  };\n\n  return (\n    <Window>\n      {chatExists && isLoading ? (\n        <Loader color=\"#00021a\" className=\"loader-chat\" />\n      ) : (\n        messages && (\n          <Messages>\n            {messages.map(message => (\n              <div key={message.id}>\n                {message.senderId === userId && (\n                  <p\n                    style={{\n                      fontSize: 12,\n                      color: 'grey',\n                      marginBottom: 2,\n                      marginLeft: 20,\n                    }}\n                  >\n                    You\n                  </p>\n                )}\n                <Message\n                  className={message.senderId === userId ? 'send' : 'received'}\n                >\n                  {message.text}\n                </Message>\n              </div>\n            ))}\n          </Messages>\n        )\n      )}\n      {(chatId !== 'new' || recepientId !== 'none') && (\n        <Form onSubmit={e => onSendMessageFormSubmit(e)}>\n          {chatId !== 'new' && isTyping === recepientId && (\n            <TypingDots size={10} color=\"#00021a\" className=\"large\" />\n          )}\n          <textarea\n            onChange={e => {\n              setMessageValue(e.target.value);\n            }}\n            onFocus={onFocus}\n            onBlur={onBlur}\n          />\n          <button disabled={!messageValue.trim().length} type=\"submit\">\n            <RiSendPlaneFill size=\"100%\" color=\"white\" />\n          </button>\n        </Form>\n      )}\n    </Window>\n  );\n};\n\nconst Window = styled.div`\n  height: calc(100vh - 61px);\n  width: 100%;\n  display: grid;\n  padding: 10px;\n  box-sizing: border-box;\n  position: relative;\n`;\nconst Message = styled.li`\n  width: 40%;\n  padding: 12px;\n  border-radius: 20px;\n  font-family: 'Nunito', sans-serif;\n  word-break: break-all;\n  &.received {\n    color: #00021a;\n    border: 1px solid orange;\n  }\n\n  &.send {\n    background-color: aliceblue;\n    color: #00021a;\n    border: 1px solid #00021a;\n  }\n`;\n\nconst Form = styled.form`\n  align-self: end;\n  height: auto;\n  width: auto;\n  display: flex;\n  justify-content: space-between;\n  position: relative;\n\n  & textarea {\n    max-width: 100%;\n    padding: 10px 20px;\n    font-size: 17px;\n    box-sizing: border-box;\n    flex: 1;\n    border: 1px solid #00021a;\n    font-family: 'Nunito', sans-serif;\n    min-height: 70px;\n    border-radius: 30px;\n    resize: none;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n\n  & button {\n    width: 50px;\n    height: 50px;\n    margin-left: 5px;\n    background-color: orange;\n    border: none;\n    border-radius: 100%;\n    padding: 10px;\n\n    &:disabled {\n      background-color: grey;\n    }\n  }\n`;\n\nconst Messages = styled.ul`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: 10px;\n  overflow-y: scroll;\n`;\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchUserInfo } from 'utils';\nimport avatarPlaceholder from '../../assets/images/avatar-placeholder.png';\nimport styled from 'styled-components';\nimport { authContext } from 'context';\nimport { doc, onSnapshot } from 'firebase/firestore';\nimport { firestore } from 'config/firebase';\nimport { TypingDots } from 'components/TypingDots/TypingDots';\n\nexport const ChatItem = ({ data }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [recepientUsername, setRecepientUsername] = useState();\n  const [recepientPhoto, setRecepientPhoto] = useState();\n  const [recepientId, setRecepientId] = useState();\n  const [isTyping, setIsTyping] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { userId } = useContext(authContext);\n  const chatId = searchParams.get('id');\n\n  const memberId = useMemo(\n    () => data.members.find(id => id !== userId),\n    [data.members, userId]\n  );\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchUserInfo(memberId)\n      .then(res => {\n        const { username, photoUrl, id } = res.val();\n\n        setRecepientUsername(username);\n        setRecepientPhoto(photoUrl ?? avatarPlaceholder);\n        setRecepientId(id);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.log(error);\n        setIsLoading(false);\n      })\n      .finally(() => setIsLoading(false));\n  }, [memberId, userId]);\n\n  useEffect(() => {\n    if (chatId) {\n      const docRef = doc(firestore, 'chats', chatId);\n      onSnapshot(docRef, snapshot => {\n        if (snapshot.data()?.typing && snapshot.data()?.typing !== userId) {\n          setIsTyping(snapshot.data().typing);\n        } else setIsTyping(false);\n      });\n    }\n  }, [chatId, userId]);\n\n  return (\n    <Item\n      onClick={() => setSearchParams({ id: data.id, with: recepientId })}\n      className={chatId === data.id && 'selected'}\n      key={data.id}\n    >\n      <AvatarWrapper>\n        {!isLoading && (\n          <img\n            src={recepientPhoto}\n            style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n            alt=\"avatar\"\n          />\n        )}\n      </AvatarWrapper>\n      <Data>\n        {!isLoading ? (\n          <p style={{ fontWeight: 700 }}>{recepientUsername}</p>\n        ) : (\n          <div></div>\n        )}\n        {!isLoading ? (\n          <p\n            style={{\n              textOverflow: 'ellipsis',\n              overflow: 'hidden',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            {data.messages[data.messages.length - 1].text}\n          </p>\n        ) : (\n          <div></div>\n        )}\n      </Data>\n      {isTyping === recepientId && (\n        <TypingDots size={5} color=\"white\" className=\"small\" />\n      )}\n    </Item>\n  );\n};\n\nconst Item = styled.li`\n  background-color: white;\n  border-radius: 15px;\n  border: 1px solid white;\n  height: 70px;\n  display: flex;\n  padding: 10px;\n  align-items: center;\n  box-sizing: border-box;\n  gap: 10px;\n  font-family: 'Nunito', sans-serif;\n  width: 230px;\n  position: relative;\n\n  &.selected {\n    background-color: #00021a;\n    color: white;\n  }\n`;\n\nconst AvatarWrapper = styled.div`\n  min-width: 50px;\n  width: 50px;\n  min-height: 50px;\n  height: 50px;\n  border-radius: 30px;\n  overflow: hidden;\n  background-color: #ced4da;\n`;\n\nconst Data = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  white-space: nowrap;\n  overflow: hidden;\n  width: 100%;\n\n  & div {\n    height: 12px;\n    border-radius: 5px;\n    width: 100%;\n    background-color: #ced4da;\n  }\n`;\n","import { Loader } from 'components';\nimport { Chat } from 'components/Chat';\nimport { ChatItem } from 'components/ChatItem/ChatItem';\nimport { firestore } from 'config/firebase';\nimport { authContext } from 'context';\nimport { query } from 'firebase/database';\nimport { collection, onSnapshot, where } from 'firebase/firestore';\nimport { useContext, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst MessagesPage = () => {\n  const [chats, setChats] = useState([]);\n  const [searchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const { userId } = useContext(authContext);\n  const chatId = searchParams.get('id');\n  const recepientId = searchParams.get('with');\n\n  useEffect(() => {\n    setIsLoading(true);\n    getChats(userId);\n  }, [userId]);\n\n  const getChats = userId => {\n    const q = query(\n      collection(firestore, 'chats'),\n      where('members', 'array-contains', userId)\n    );\n\n    onSnapshot(q, querySnapshot => {\n      const chats = [];\n      querySnapshot.forEach(doc => {\n        chats.push({ ...doc.data(), id: doc.id });\n      });\n      setChats(chats);\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <div\n      style={{\n        height: 'calc(100vh - 61px)',\n        marginTop: 61,\n        display: 'flex',\n        position: 'relative',\n      }}\n    >\n      {isLoading ? (\n        <Loader color=\"#00021a\" />\n      ) : (\n        <>\n          <ChatsList>\n            {chats.map(chat => (\n              <ChatItem data={chat} key={chat.id} />\n            ))}\n          </ChatsList>\n          {chatId === 'new' && chats.length === 0 && recepientId === 'none' ? (\n            <StartMessage>You have no chats yet</StartMessage>\n          ) : recepientId === 'none' ? (\n            <StartMessage>Select a chat</StartMessage>\n          ) : chatId === 'new' && (\n            <StartMessage>Start a chat</StartMessage>\n          )}\n          <Chat />\n        </>\n      )}\n    </div>\n  );\n};\n\nconst StartMessage = styled.p`\n  position: absolute;\n  top: 50%;\n  left: 60%;\n  transform: translate(-60%, -50%);\n  font-family: 'Nunito', sans-serif;\n  font-size: 50px;\n  color: #00021a;\n  font-weight: 700;\n`;\n\nconst ChatsList = styled.ul`\n  height: 100%;\n  overflowy: scroll;\n  background-color: #00021a;\n  padding: 10px;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport default MessagesPage;\n"],"names":["TypingDots","_ref","size","color","className","_jsxs","Dots","concat","children","_jsx","style","width","height","backgroundColor","loaderAnimation","keyframes","_templateObject","_taggedTemplateLiteral","styled","_templateObject2","Chat","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","messages","setMessages","_useState3","_useState4","messageValue","setMessageValue","_useState5","_useState6","chatExists","setChatExists","userId","useContext","authContext","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","isTyping","setIsTyping","chatId","get","recepientId","useEffect","checkChatExists","_asyncToGenerator","_regeneratorRuntime","mark","_callee","q","querySnapshot","wrap","_context","prev","next","query","collection","firestore","where","getDocs","sent","empty","id","with","docs","stop","apply","arguments","docRef","doc","onSnapshot","snapshot","_snapshot$data","_snapshot$data2","_snapshot$data3","data","typing","Window","Loader","Messages","map","message","senderId","fontSize","marginBottom","marginLeft","Message","text","Form","onSubmit","e","nanoid","preventDefault","createNewChat","then","res","addNewMessage","target","reset","onSendMessageFormSubmit","onChange","value","onFocus","chatRef","updateDoc","onBlur","disabled","trim","length","type","RiSendPlaneFill","_templateObject3","_templateObject4","ChatItem","recepientUsername","setRecepientUsername","recepientPhoto","setRecepientPhoto","setRecepientId","memberId","useMemo","members","find","fetchUserInfo","_res$val","val","username","photoUrl","avatarPlaceholder","catch","error","console","log","finally","Item","onClick","AvatarWrapper","src","objectFit","alt","Data","fontWeight","textOverflow","overflow","whiteSpace","StartMessage","ChatsList","chats","setChats","getChats","forEach","push","_objectSpread","marginTop","display","position","_Fragment","chat"],"sourceRoot":""}